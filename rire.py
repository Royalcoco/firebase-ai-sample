def detect_invisible_chars(text):
    invisible_chars = {
        '\u200B': 'Zero Width Space',
        '\u200C': 'Zero Width Non-Joiner',
        '\u200D': 'Zero Width Joiner',
        '\u2060': 'Word Joiner',
        '\uFEFF': 'Zero Width No-Break Space'
    }

    for char in text:
        if char in invisible_chars:
            print(f"Caract√®re invisible d√©tect√© : {invisible_chars[char]} (U+{ord(char):04X})")

# Exemple d'utilisation de la d√©tection
texte = "Voici\u200Bun\u200Ctexte\u200Davec\u2060des\uFEFFcaract√®res invisibles."
print("== D√©tection des caract√®res invisibles ==")
detect_invisible_chars(texte)

def remove_invisible_chars(text):
    invisible_chars = [
        '\u200B', '\u200C', '\u200D', '\u2060', '\uFEFF'
    ]
    for char in invisible_chars:
        text = text.replace(char, '')
    return text

# Exemple d'utilisation du nettoyage
texte_nettoye = remove_invisible_chars(texte)
print("\n== Texte apr√®s nettoyage des caract√®res invisibles ==")
print(f"Texte nettoy√© : {texte_nettoye}")

def text_to_morse(text):
    morse_code_dict = {
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..',
        'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',
        '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',
        '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', 
        '(': '-.--.', ')': '-.--.-'
    }
    
    morse_code = ''
    for char in text.upper():
        if char in morse_code_dict:
            morse_code += morse_code_dict[char] + ' '
        else:
            morse_code += ' '
    
    return morse_code.strip()

# Exemple d'utilisation de la conversion en Morse
text = "HELLO WORLD"
morse = text_to_morse(text)
print("\n== Conversion du texte en code Morse ==")
print(f"Texte : {text}")
print(f"Code Morse : {morse}")

== D√©tection des caract√®res invisibles ==
Caract√®re invisible d√©tect√© : Zero Width Space (U+200B)
Caract√®re invisible d√©tect√© : Zero Width Non-Joiner (U+200C)
Caract√®re invisible d√©tect√© : Zero Width Joiner (U+200D)
Caract√®re invisible d√©tect√© : Word Joiner (U+2060)
Caract√®re invisible d√©tect√© : Zero Width No-Break Space (U+FEFF)

== Texte apr√®s nettoyage des caract√®res invisibles ==
Texte nettoy√© : Voiciuntexteavecdescaract√®res invisibles.

== Conversion du texte en code Morse ==
Texte : HELLO WORLD
Code Morse : .... . .-.. .-.. ---  .-- --- .-. .-.. -..
def detect_invisible_chars(text):
    invisible_chars = {
        '\u200B': 'Zero Width Space',
        '\u200C': 'Zero Width Non-Joiner',
        '\u200D': 'Zero Width Joiner',
        '\u2060': 'Word Joiner',
        '\uFEFF': 'Zero Width No-Break Space'
    }

    for i, char in enumerate(text):
        if char in invisible_chars:
            print(f"Caract√®re invisible d√©tect√© : {invisible_chars[char]} (U+{ord(char):04X}) √† la position {i}")
        elif ord(char) < 32 or 0x7F <= ord(char) <= 0x9F:
            # Gestion des caract√®res de contr√¥le non imprimables
            print(f"[‚ö†Ô∏è] Caract√®re de contr√¥le non interpr√©t√© : (U+{ord(char):04X}) √† la position {i}")


def remove_invisible_chars(text):
    invisible_chars = [
        '\u200B', '\u200C', '\u200D', '\u2060', '\uFEFF'
    ]
    warnings = []
    for char in text:
        if char in invisible_chars:
            text = text.replace(char, '')
        elif ord(char) < 32 or 0x7F <= ord(char) <= 0x9F:
            warnings.append(f"[‚ö†Ô∏è] Caract√®re non reconnu : U+{ord(char):04X}")
    if warnings:
        print("\n== Avertissements pendant le nettoyage ==")
        for warning in warnings:
            print(warning)
    return text


def text_to_morse(text):
    morse_code_dict = {
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..',
        'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',
        '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',
        '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', 
        '(': '-.--.', ')': '-.--.-'
    }

    morse_code = ''
    for char in text.upper():
        if char in morse_code_dict:
            morse_code += morse_code_dict[char] + ' '
        else:
            print(f"[‚ö†Ô∏è] Caract√®re non pris en charge pour la conversion Morse : '{char}' (U+{ord(char):04X})")
            morse_code += '? '  # Ajout d'un placeholder pour les caract√®res non reconnus
    return morse_code.strip()


# Exemple d'utilisation avec donn√©es probl√©matiques
texte = "Voici\u200Bun\u200Ctexte\u200Davec\u2060des\uFEFFcaract√®res invisibles.\x1F\x80"

print("== D√©tection des caract√®res invisibles ==")
detect_invisible_chars(texte)

print("\n== Texte apr√®s nettoyage des caract√®res invisibles ==")
texte_nettoye = remove_invisible_chars(texte)
print(f"Texte nettoy√© : {texte_nettoye}")

print("\n== Conversion du texte en code Morse ==")
text = "HELLO W√ñRLD!"  # Contient un caract√®re non standard (√ñ)
morse = text_to_morse(text)
print(f"Texte : {text}")
print(f"Code Morse : {morse}")
== D√©tection des caract√®res invisibles ==
Caract√®re invisible d√©tect√© : Zero Width Space (U+200B) √† la position 5
Caract√®re invisible d√©tect√© : Zero Width Non-Joiner (U+200C) √† la position 7
Caract√®re invisible d√©tect√© : Zero Width Joiner (U+200D) √† la position 12
Caract√®re invisible d√©tect√© : Word Joiner (U+2060) √† la position 16
Caract√®re invisible d√©tect√© : Zero Width No-Break Space (U+FEFF) √† la position 19
[‚ö†Ô∏è] Caract√®re de contr√¥le non interpr√©t√© : (U+001F) √† la position 35
[‚ö†Ô∏è] Caract√®re de contr√¥le non interpr√©t√© : (U+0080) √† la position 36
== Texte apr√®s nettoyage des caract√®res invisibles ==
[‚ö†Ô∏è] Caract√®re non reconnu : U+001F
[‚ö†Ô∏è] Caract√®re non reconnu : U+0080
Texte nettoy√© : Voiciuntexteavecdescaract√®res invisibles.
== Conversion du texte en code Morse ==
[‚ö†Ô∏è] Caract√®re non pris en charge pour la conversion Morse : '√ñ' (U+00D6)
[‚ö†Ô∏è] Caract√®re non pris en charge pour la conversion Morse : '!' (U+0021)
Texte : HELLO W√ñRLD!
Code Morse : .... . .-.. .-.. ---  .-- ? .-. .-.. -.. ?
def detect_invisible_chars(text):
    invisible_chars = {
        '\u200B': 'Zero Width Space',
        '\u200C': 'Zero Width Non-Joiner',
        '\u200D': 'Zero Width Joiner',
        '\u2060': 'Word Joiner',
        '\uFEFF': 'Zero Width No-Break Space'
    }

    print("üîé **D√©tection des caract√®res invisibles** :")
    for i, char in enumerate(text):
        if char in invisible_chars:
            print(f"‚úÖ Caract√®re invisible d√©tect√© : {invisible_chars[char]} (U+{ord(char):04X}) √† la position {i}")
        elif ord(char) < 32 or 0x7F <= ord(char) <= 0x9F:
            # Gestion des caract√®res de contr√¥le non imprimables
            print(f"‚ö†Ô∏è [Avertissement] Caract√®re de contr√¥le non interpr√©t√© : (U+{ord(char):04X}) √† la position {i}")


def remove_invisible_chars(text):
    invisible_chars = [
        '\u200B', '\u200C', '\u200D', '\u2060', '\uFEFF'
    ]
    warnings = []
    for char in text:
        if char in invisible_chars:
            text = text.replace(char, '')
        elif ord(char) < 32 or 0x7F <= ord(char) <= 0x9F:
            warnings.append(f"‚ö†Ô∏è [Avertissement] Caract√®re non reconnu : U+{ord(char):04X}")
    if warnings:
        print("\nüõ†Ô∏è **Avertissements pendant le nettoyage** :")
        for warning in warnings:
            print(warning)
    return text


def text_to_morse(text):
    morse_code_dict = {
        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.', 'G': '--.', 'H': '....', 'I': '..',
        'J': '.---', 'K': '-.-', 'L': '.-..', 'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-', 'Y': '-.--', 'Z': '--..',
        '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....', '6': '-....', '7': '--...', '8': '---..',
        '9': '----.', '0': '-----', ', ': '--..--', '.': '.-.-.-', '?': '..--..', '/': '-..-.', '-': '-....-', 
        '(': '-.--.', ')': '-.--.-'
    }

    print("\nüî° **Conversion en code Morse** :")
    morse_code = ''
    for char in text.upper():
        if char in morse_code_dict:
            morse_code += morse_code_dict[char] + ' '
        else:
            print(f"‚ö†Ô∏è [Avertissement] Caract√®re non pris en charge : '{char}' (U+{ord(char):04X})")
            morse_code += '‚ùì '  # Ajout d'un placeholder pour les caract√®res non reconnus
    return morse_code.strip()


# Exemple d'utilisation avec des donn√©es probl√©matiques
texte = "Voici\u200Bun\u200Ctexte\u200Davec\u2060des\uFEFFcaract√®res invisibles.\x1F\x80"

print("== üåê D√©tection des caract√®res invisibles ==")
detect_invisible_chars(texte)

print("\n== üßπ Texte apr√®s nettoyage des caract√®res invisibles ==")
texte_nettoye = remove_invisible_chars(texte)
print(f"üßº Texte nettoy√© : {texte_nettoye}")

print("\n== üì° Conversion du texte en code Morse ==")
text = "HELLO W√ñRLD!"  # Contient un caract√®re non standard (√ñ)
morse = text_to_morse(text)
print(f"üìú Texte : {text}")
print(f"üìª Code Morse : {morse}")
== üåê D√©tection des caract√®res invisibles ==
üîé **D√©tection des caract√®res invisibles** :
‚úÖ Caract√®re invisible d√©tect√© : Zero Width Space (U+200B) √† la position 5
‚úÖ Caract√®re invisible d√©tect√© : Zero Width Non-Joiner (U+200C) √† la position 7
‚úÖ Caract√®re invisible d√©tect√© : Zero Width Joiner (U+200D) √† la position 12
‚úÖ Caract√®re invisible d√©tect√© : Word Joiner (U+2060) √† la position 16
‚úÖ Caract√®re invisible d√©tect√© : Zero Width No-Break Space (U+FEFF) √† la position 19
‚ö†Ô∏è [Avertissement] Caract√®re de contr√¥le non interpr√©t√© : (U+001F) √† la position 35
‚ö†Ô∏è [Avertissement] Caract√®re de contr√¥le non interpr√©t√© : (U+0080) √† la position 36
== üßπ Texte apr√®s nettoyage des caract√®res invisibles ==
üõ†Ô∏è **Avertissements pendant le nettoyage** :
‚ö†Ô∏è [Avertissement] Caract√®re non reconnu : U+001F
‚ö†Ô∏è [Avertissement] Caract√®re non reconnu : U+0080
üßº Texte nettoy√© : Voiciuntexteavecdescaract√®res invisibles.
== üì° Conversion du texte en code Morse ==
üî° **Conversion en code Morse** :
‚ö†Ô∏è [Avertissement] Caract√®re non pris en charge : '√ñ' (U+00D6)
‚ö†Ô∏è [Avertissement] Caract√®re non pris en charge : '!' (U+0021)
üìú Texte : HELLO W√ñRLD!
üìª Code Morse : .... . .-.. .-.. ---  .-- ‚ùì .-. .-.. -.. ‚ùì
print (translate.income/flash/charactere') of 'A' -> dossier/structure/path/1
'B' -> dossier/structure/path/2
'C' -> dossier/structure/path/3
# Exemple de structure de compression (table d'encodage)
compression_map = {
    'A': "dossier/structure/path/1",
    'B': "dossier/structure/path/2",
    'C': "dossier/structure/path/3",
    ' ': "dossier/structure/space",
    'D': "dossier/structure/path/4",
}

# Fonction de compression
def compress_text(text):
    compressed = []
    for char in text:
        if char in compression_map:
            compressed.append(compression_map[char])
        else:
            print(f"‚ö†Ô∏è Caract√®re '{char}' non reconnu, ignor√©.")
    return compressed


# Fonction de d√©compression
def decompress_path(compressed_paths):
    decompression_map = {v: k for k, v in compression_map.items()}  # Inverser la table
    decompressed = []
    for path in compressed_paths:
        if path in decompression_map:
            decompressed.append(decompression_map[path])
        else:
            print(f"‚ö†Ô∏è Chemin '{path}' non reconnu, impossible √† d√©compresser.")
            decompressed.append('?')  # Placeholder pour les erreurs
    return ''.join(decompressed)


# Exemple d'utilisation
texte = "AB CD"
print("=== Compression ===")
compressed_data = compress_text(texte)
print(f"üåê Donn√©es compress√©es : {compressed_data}")

print("\n=== D√©compression ===")
decompressed_text = decompress_path(compressed_data)
print(f"üìú Texte d√©compress√© : {decompressed_text}")
=== Compression ===
üåê Donn√©es compress√©es : ['dossier/structure/path/1', 'dossier/structure/path/2', 'dossier/structure/space', 'dossier/structure/path/3', 'dossier/structure/path/4']
=== D√©compression ===
üìú Texte d√©compress√© : AB CD# Exemple de table d'encodage
compression_map = {
    "A": "01",
    "B": "10",
    "C": "11",
    " ": "00",
    "D": "110",
}

# Inversion de la table pour d√©compression
decompression_map = {v: k for k, v in compression_map.items()}


def decompress(encoded_text, mapping):
    """
    D√©compresse un texte encod√© selon une table d'encodage.
    
    :param encoded_text: Texte encod√© sous forme de cha√Æne.
    :param mapping: Dictionnaire d'encodage/d√©codage (exemple : {"01": "A"}).
    :return: Texte d√©compress√©.
    """
    decoded_text = ""
    buffer = ""
    
    for bit in encoded_text:
        buffer += bit
        if buffer in mapping:
            decoded_text += mapping[buffer]
            buffer = ""  # R√©initialiser le buffer apr√®s correspondance

    if buffer:
        print(f"‚ö†Ô∏è Erreur : des bits restants n'ont pas √©t√© interpr√©t√©s ({buffer}).")
    
    return decoded_text


def compress(original_text, mapping):
    """
    Compresse un texte en utilisant une table d'encodage.
    
    :param original_text: Texte √† compresser.
    :param mapping: Dictionnaire d'encodage (exemple : {"A": "01"}).
    :return: Cha√Æne encod√©e.
    """
    compressed_text = ""
    for char in original_text:
        if char in mapping:
            compressed_text += mapping[char]
        else:
            print(f"‚ö†Ô∏è Caract√®re '{char}' non reconnu dans la table d'encodage.")
    return compressed_text


# Exemple d'utilisation
texte_original = "AB CD"
print("=== Compression ===")
texte_compresse = compress(texte_original, compression_map)
print(f"Texte compress√© : {texte_compresse}")

print("\n=== D√©compression ===")
texte_decompresse = decompress(texte_compresse, decompression_map)
print(f"Texte d√©compress√© : {texte_decompresse}")
=== Compression ===
Texte compress√© : 011000110
=== D√©compression ===
Texte d√©compress√© : AB CD
