import os
import getpass
import shutil

# Niveau 1 de sécurité : mot de passe à double authentification
def double_authentification():
    password1 = getpass.getpass("Entrez le premier mot de passe : ")
    password2 = getpass.getpass("Entrez le deuxième mot de passe : ")

    if password1 == password2:
        print("Authentification réussie !")
        niveau2()
    else:
        print("Authentification échouée.")

# Niveau 2 de sécurité : synchronisation de données
def niveau2():
    password = getpass.getpass("Entrez le mot de passe pour accéder au niveau 2 : ")

    if password == "mon_mot_de_passe":
        print("Accès au niveau 2 autorisé !")
        synchronisation_donnees()
    else:
        print("Mot de passe incorrect.")

# Synchronisation de données
def synchronisation_donnees():
    # Envoyer les données vers un dossier maître
    shutil.copytree("dossier_source", "dossier_maitre")

    # Compresser les données pour le client
    shutil.make_archive("dossier_client", "zip", "dossier_source")

    print("Synchronisation de données terminée.")

# Créer un dossier
def creer_dossier():
    nom_dossier = input("Entrez le nom du dossier : ")
    os.makedirs(nom_dossier)

    print("Dossier créé avec succès !")
    double_authentification()

# Appel de la fonction pour créer le dossier
creer_dossier()
# Translate de devise par nombre de point
def translate_devises():
    devise_source = input("Entrez la devise source : ")
    devise_cible = input("Entrez la devise cible : ")
    montant = float(input("Entrez le montant à convertir : "))
    taux_conversion = 1.5  # Exemple de taux de conversion
    montant_converti = montant * taux_conversion
    print(f"{montant} {devise_source} équivaut à {montant_converti} {devise_cible}.")

# Blockchain de 3 niveaux de sécurité
def blockchain_securite():
    mot_de_passe1 = getpass.getpass("Entrez le premier mot de passe : ")
    mot_de_passe2 = getpass.getpass("Entrez le deuxième mot de passe : ")
    mot_de_passe3 = getpass.getpass("Entrez le troisième mot de passe : ")

    if mot_de_passe1 == mot_de_passe2 and mot_de_passe2 == mot_de_passe3:
        print("Validation des mots de passe réussie !")
        # Code pour la blockchain de sécurité
    else:
        print("Validation des mots de passe échouée.")

# Appel de la fonction pour la traduction de devises
translate_devises()

# Appel de la fonction pour la blockchain de sécurité
blockchain_securite()

# Appel de la fonction pour la double authentification
double_authentification()

# Appel de la fonction pour le niveau 2 de sécurité
niveau2()

# Appel de la fonction pour la synchronisation de données
synchronisation_donnees()

# Appel de la fonction pour créer un dossier
creer_dossier()

# Appel de la fonction pour traduire des devises
translate_devises()

# Appel de la fonction pour la blockchain de sécurité
# Ajuster le ping en fonction des sous-revenus
def ajuster_ping(sous_revenus):
    if sous_revenus < 1000:
        ping = 100
    elif sous_revenus < 5000:
        ping = 50
    else:
        ping = 10
    print(f"Ping ajusté à {ping} ms en fonction des sous-revenus.")

# Créer une sortie pour intégrer 3 nouveaux inputs par personne rentrant dans le ping du sortant
def creer_sortie():
    nb_personnes = int(input("Entrez le nombre de personnes : "))
    ping_sortant = int(input("Entrez le ping sortant : "))
    ping_total = ping_sortant + (nb_personnes * 3)
    print(f"Ping total : {ping_total} ms.")

# Appel de la fonction pour ajuster le ping en fonction des sous-revenus
ajuster_ping(sous_revenus)

# Appel de la fonction pour créer une sortie
creer_sortie()

# Appel de la fonction pour ajuster le ping en fonction des sous-revenus
ajuster_ping(sous_revenus)

# Appel de la fonction pour créer une sortie
creer_sortie()

# Appel de la fonction pour ajuster le ping en fonction des sous-revenus
ajuster_ping(sous_revenus)
# Création d'un NFT avec un QR code algorithmique
def creer_nft():
    # Code pour créer un NFT avec un QR code algorithmique
    print("NFT créé avec succès !")

# Fusion de la clé créée par chaque transaction de la blockchain
def fusionner_cles():
    # Code pour fusionner les clés créées par chaque transaction de la blockchain
    print("Clés fusionnées avec succès !")

# Compression du dossier pour créer un fichier zip
def compresser_dossier():
    # Code pour compresser le dossier et créer un fichier zip
    print("Dossier compressé avec succès !")

# Verrouillage des NFT à la fin de la distribution
def verrouiller_nft():
    # Code pour verrouiller les NFT à la fin de la distribution
    print("NFT verrouillés avec succès !")

# Cumul de la valeur des NFT à la vente de transaction
def cumuler_valeur_nft():
    # Code pour cumuler la valeur des NFT à la vente de transaction
    print("Valeur des NFT cumulée avec succès !")

# Appel de la fonction pour créer un NFT avec un QR code algorithmique
creer_nft()

# Appel de la fonction pour fusionner les clés de la blockchain
fusionner_cles()

# Appel de la fonction pour compresser le dossier en un fichier zip
compresser_dossier()

# Appel de la fonction pour verrouiller les NFT à la fin de la distribution
verrouiller_nft()

# Appel de la fonction pour cumuler la valeur des NFT à la vente de transaction
cumuler_valeur_nft()