import sqlite3
import os
import json
import csv
import math
import numpy as np
import sounddevice as sd
import zipfile
from cryptography.fernet import Fernet

# G√©n√©ration de cl√© de chiffrement si elle n'existe pas
def generate_key():
    if not os.path.exists("wallet_key.key"):
        key = Fernet.generate_key()
        with open("wallet_key.key", "wb") as key_file:
            key_file.write(key)

def load_key():
    with open("wallet_key.key", "rb") as key_file:
        return Fernet(key_file.read())

generate_key()
cipher = load_key()

# Cr√©ation de la base de donn√©es s√©curis√©e
def init_db():
    conn = sqlite3.connect("wallet.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT,
            amount REAL,
            price REAL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS revenues (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            revenue REAL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS reinvestments (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            amount REAL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS investment_summary (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            total_invested REAL,
            total_revenue REAL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# Fonction pour ins√©rer des donn√©es brutes et les augmenter √† chaque t√©l√©chargement
def insert_raw_data(filename="raw_data.txt"):
    initial_value = 100.0  # Valeur initiale
    if os.path.exists(filename):
        with open(filename, "r") as file:
            data = float(file.read())
        new_value = data * 1.0004  # Augmentation de 0.04%
    else:
        new_value = initial_value
    
    with open(filename, "w") as file:
        file.write(str(new_value))
    
    print(f"üìÑ Donn√©es mises √† jour: {new_value:.4f}")

# Fonction pour compresser et inclure une rupture de contrat
def zip_raw_data_with_contract_break(filename="raw_data.txt", zip_filename="contract_data.zip"):
    with open("contract_break.txt", "w") as file:
        file.write("Rupture du premier contrat en vigueur.")
    
    with zipfile.ZipFile(zip_filename, "w", zipfile.ZIP_DEFLATED) as zipf:
        zipf.write(filename)
        zipf.write("contract_break.txt")
    print(f"üì¶ Fichier compress√© avec rupture de contrat: {zip_filename}")

# Fonction pour d√©compresser et ex√©cuter le troisi√®me contrat
def unzip_and_execute_contract(zip_filename="contract_data.zip", extract_to="."):
    with zipfile.ZipFile(zip_filename, "r") as zipf:
        zipf.extractall(extract_to)
    print(f"üìÇ Fichier extrait depuis {zip_filename}")
    
    third_contract_file = os.path.join(extract_to, "third_contract.txt")
    if os.path.exists(third_contract_file):
        with open(third_contract_file, "r") as file:
            print(f"üîç Ex√©cution du troisi√®me contrat: {file.read()}")
    else:
        print("‚ö†Ô∏è Aucun troisi√®me contrat trouv√©.")

# Interface CLI am√©lior√©e
def main():
    while True:
        print("\n========= TERMINAL WALLET =========")
        print("1Ô∏è‚É£  Acheter Crypto")
        print("2Ô∏è‚É£  Revendre Crypto")
        print("3Ô∏è‚É£  Voir Transactions")
        print("4Ô∏è‚É£  Voir R√©sum√© des Investissements")
        print("5Ô∏è‚É£  Mettre √† jour les Donn√©es Brutes")
        print("6Ô∏è‚É£  Compresser avec Rupture de Contrat")
        print("7Ô∏è‚É£  D√©compresser et Ex√©cuter le Troisi√®me Contrat")
        print("8Ô∏è‚É£  Quitter")
        print("===================================")
        choice = input("üëâ Choisissez une option: ")
        if choice == "1":
            try:
                amount = float(input("Quantit√© de crypto: "))
                price = float(input("Prix unitaire (‚Ç¨): "))
                buy_crypto(amount, price)
            except ValueError:
                print("‚ùå Entr√©e invalide. Veuillez saisir un nombre valide.")
        elif choice == "2":
            sell_crypto()
        elif choice == "3":
            show_transactions()
        elif choice == "4":
            show_investment_summary()
        elif choice == "5":
            insert_raw_data()
        elif choice == "6":
            zip_raw_data_with_contract_break()
        elif choice == "7":
            unzip_and_execute_contract()
        elif choice == "8":
            print("üëã Au revoir!")
            break
        else:
            print("‚ùå Option invalide, veuillez r√©essayer.")

if __name__ == "__main__":
    main()
