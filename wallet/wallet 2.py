import sqlite3
import os
import json
import csv
import math
import hashlib
import numpy as np
import sounddevice as sd
import zipfile
import http.server
import socketserver
import threading
from cryptography.fernet import Fernet

# G√©n√©ration de cl√© de chiffrement sur un hardware s√©curis√©
def generate_hardware_key():
    key_path = "key_secure-passe.throw"  # Stockage d√©centralis√© simul√©
    if not os.path.exists(key_path):
        key = Fernet.generate_key()
        with open(key_path, "wb") as key_file:
            key_file.write(key)

def load_hardware_key():
    key_path = "key_secure-passe.throw"
    with open(key_path, "rb") as key_file:
        return Fernet(key_file.read())

generate_hardware_key()
cipher = load_hardware_key()

# Cr√©ation de la base de donn√©es s√©curis√©e
def init_db():
    conn = sqlite3.connect("wallet.db")
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS transactions (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            type TEXT,
            amount REAL,
            price REAL,
            sender TEXT,
            receiver TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS blocks (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            data TEXT,
            hash TEXT,
            previous_hash TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    conn.close()

init_db()

# Fonction pour envoyer des crypto
def send_crypto(sender, receiver, amount):
    conn = sqlite3.connect("wallet.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO transactions (type, amount, sender, receiver) VALUES (?, ?, ?, ?)", ("send", amount, sender, receiver))
    conn.commit()
    conn.close()
    print(f"üì§ {amount} crypto envoy√©s de {sender} √† {receiver}.")

# Fonction pour recevoir des crypto
def receive_crypto(sender, receiver, amount):
    conn = sqlite3.connect("wallet.db")
    cursor = conn.cursor()
    cursor.execute("INSERT INTO transactions (type, amount, sender, receiver) VALUES (?, ?, ?, ?)", ("receive", amount, sender, receiver))
    conn.commit()
    conn.close()
    print(f"üì• {amount} crypto re√ßus de {sender} par {receiver}.")

# Interface CLI am√©lior√©e
def main():
    while True:
        print("\n========= TERMINAL WALLET =========")
        print("1Ô∏è‚É£  Acheter Crypto")
        print("2Ô∏è‚É£  Revendre Crypto")
        print("3Ô∏è‚É£  Voir Transactions")
        print("4Ô∏è‚É£  Envoyer Crypto")
        print("5Ô∏è‚É£  Recevoir Crypto")
        print("6Ô∏è‚É£  Miner un Block")
        print("7Ô∏è‚É£  Compresser avec Block")
        print("8Ô∏è‚É£  D√©compresser et V√©rifier")
        print("9Ô∏è‚É£  Quitter")
        print("===================================")
        choice = input("üëâ Choisissez une option: ")
        if choice == "1":
            try:
                amount = float(input("Quantit√© de crypto: "))
                price = float(input("Prix unitaire (‚Ç¨): "))
                buy_crypto(amount, price)
            except ValueError:
                print("‚ùå Entr√©e invalide. Veuillez saisir un nombre valide.")
        elif choice == "2":
            sell_crypto()
        elif choice == "3":
            show_transactions()
        elif choice == "4":
            sender = input("Exp√©diteur: ")
            receiver = input("Destinataire: ")
            amount = float(input("Montant: "))
            send_crypto(sender, receiver, amount)
        elif choice == "5":
            sender = input("Exp√©diteur: ")
            receiver = input("Destinataire: ")
            amount = float(input("Montant: "))
            receive_crypto(sender, receiver, amount)
        elif choice == "6":
            data = input("Donn√©es du block: ")
            mine_block({"data": data})
        elif choice == "7":
            zip_contract_with_block()
        elif choice == "8":
            unzip_and_verify_block()
        elif choice == "9":
            print("üëã Au revoir!")
            break
        else:
            print("‚ùå Option invalide, veuillez r√©essayer.")

if __name__ == "__main__":
    main()
